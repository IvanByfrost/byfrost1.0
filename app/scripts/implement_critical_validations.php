<?php
/**
 * Implement Critical Validations - ByFrost
 * Implementa validaciones cr√≠ticas en puntos importantes del sistema
 */

require_once 'app/library/Validator.php';

class CriticalValidationImplementer {
    private $implemented = 0;
    private $errors = [];
    
    public function __construct() {
        echo "üõ°Ô∏è Implementando validaciones cr√≠ticas...\n\n";
        
        $this->implementLoginValidations();
        $this->implementRegisterValidations();
        $this->implementPasswordChangeValidations();
        $this->implementUserManagementValidations();
        $this->implementSchoolValidations();
        $this->implementGradeValidations();
        $this->generateImplementationReport();
    }
    
    /**
     * Implementar validaciones en login
     */
    private function implementLoginValidations() {
        echo "üîê Implementando validaciones en LoginController...\n";
        
        $file = 'app/controllers/LoginController.php';
        if (file_exists($file)) {
            $content = file_get_contents($file);
            
            // Buscar m√©todo de login
            if (strpos($content, 'public function login') !== false) {
                // Agregar validaciones al inicio del m√©todo
                $validationCode = '
        // Validaciones cr√≠ticas
        $email = Validator::sanitizePost("email");
        $password = Validator::sanitizePost("password");
        
        if (empty($email) || empty($password)) {
            $_SESSION["error"] = "Email y contrase√±a son requeridos";
            header("Location: " . url . "login");
            exit();
        }
        
        $emailValidation = Validator::validateEmail($email);
        if (!$emailValidation["valid"]) {
            $_SESSION["error"] = $emailValidation["error"];
            header("Location: " . url . "login");
            exit();
        }
        
        $passwordValidation = Validator::validatePassword($password, 6);
        if (!$passwordValidation["valid"]) {
            $_SESSION["error"] = $passwordValidation["error"];
            header("Location: " . url . "login");
            exit();
        }
        
        // Usar valores validados
        $email = $emailValidation["value"];
        $password = $passwordValidation["value"];
';
                
                $content = str_replace(
                    'public function login() {',
                    'public function login() {' . $validationCode,
                    $content
                );
                
                if (file_put_contents($file, $content)) {
                    echo "   ‚úÖ Validaciones implementadas en LoginController\n";
                    $this->implemented++;
                } else {
                    $this->errors[] = "Error implementando validaciones en LoginController";
                }
            }
        }
    }
    
    /**
     * Implementar validaciones en registro
     */
    private function implementRegisterValidations() {
        echo "üìù Implementando validaciones en RegisterController...\n";
        
        $file = 'app/controllers/RegisterController.php';
        if (file_exists($file)) {
            $content = file_get_contents($file);
            
            // Buscar m√©todo de registro
            if (strpos($content, 'public function register') !== false) {
                // Agregar validaciones al inicio del m√©todo
                $validationCode = '
        // Validaciones cr√≠ticas
        $name = Validator::sanitizePost("name");
        $email = Validator::sanitizePost("email");
        $password = Validator::sanitizePost("password");
        $confirmPassword = Validator::sanitizePost("confirm_password");
        $document = Validator::sanitizePost("document");
        
        // Validar campos requeridos
        if (empty($name) || empty($email) || empty($password) || empty($confirmPassword) || empty($document)) {
            $_SESSION["error"] = "Todos los campos son requeridos";
            header("Location: " . url . "register");
            exit();
        }
        
        // Validar email
        $emailValidation = Validator::validateEmail($email);
        if (!$emailValidation["valid"]) {
            $_SESSION["error"] = $emailValidation["error"];
            header("Location: " . url . "register");
            exit();
        }
        
        // Validar contrase√±a
        $passwordValidation = Validator::validatePassword($password, 8);
        if (!$passwordValidation["valid"]) {
            $_SESSION["error"] = $passwordValidation["error"];
            header("Location: " . url . "register");
            exit();
        }
        
        // Validar confirmaci√≥n de contrase√±a
        if ($password !== $confirmPassword) {
            $_SESSION["error"] = "Las contrase√±as no coinciden";
            header("Location: " . url . "register");
            exit();
        }
        
        // Validar documento
        $documentValidation = Validator::validateDocument($document);
        if (!$documentValidation["valid"]) {
            $_SESSION["error"] = $documentValidation["error"];
            header("Location: " . url . "register");
            exit();
        }
        
        // Validar nombre
        $nameValidation = Validator::validateString($name, 100, 2);
        if (!$nameValidation["valid"]) {
            $_SESSION["error"] = $nameValidation["error"];
            header("Location: " . url . "register");
            exit();
        }
        
        // Usar valores validados
        $name = $nameValidation["value"];
        $email = $emailValidation["value"];
        $password = $passwordValidation["value"];
        $document = $documentValidation["value"];
';
                
                $content = str_replace(
                    'public function register() {',
                    'public function register() {' . $validationCode,
                    $content
                );
                
                if (file_put_contents($file, $content)) {
                    echo "   ‚úÖ Validaciones implementadas en RegisterController\n";
                    $this->implemented++;
                } else {
                    $this->errors[] = "Error implementando validaciones en RegisterController";
                }
            }
        }
    }
    
    /**
     * Implementar validaciones en cambio de contrase√±a
     */
    private function implementPasswordChangeValidations() {
        echo "üîë Implementando validaciones en cambio de contrase√±a...\n";
        
        $file = 'app/controllers/ForgotPasswordController.php';
        if (file_exists($file)) {
            $content = file_get_contents($file);
            
            // Buscar m√©todo de cambio de contrase√±a
            if (strpos($content, 'public function changePassword') !== false) {
                // Agregar validaciones al inicio del m√©todo
                $validationCode = '
        // Validaciones cr√≠ticas
        $currentPassword = Validator::sanitizePost("current_password");
        $newPassword = Validator::sanitizePost("new_password");
        $confirmPassword = Validator::sanitizePost("confirm_password");
        
        if (empty($currentPassword) || empty($newPassword) || empty($confirmPassword)) {
            $_SESSION["error"] = "Todos los campos son requeridos";
            header("Location: " . url . "change-password");
            exit();
        }
        
        // Validar nueva contrase√±a
        $passwordValidation = Validator::validatePassword($newPassword, 8);
        if (!$passwordValidation["valid"]) {
            $_SESSION["error"] = $passwordValidation["error"];
            header("Location: " . url . "change-password");
            exit();
        }
        
        // Validar confirmaci√≥n
        if ($newPassword !== $confirmPassword) {
            $_SESSION["error"] = "Las contrase√±as no coinciden";
            header("Location: " . url . "change-password");
            exit();
        }
        
        // Usar valores validados
        $newPassword = $passwordValidation["value"];
';
                
                $content = str_replace(
                    'public function changePassword() {',
                    'public function changePassword() {' . $validationCode,
                    $content
                );
                
                if (file_put_contents($file, $content)) {
                    echo "   ‚úÖ Validaciones implementadas en ForgotPasswordController\n";
                    $this->implemented++;
                } else {
                    $this->errors[] = "Error implementando validaciones en ForgotPasswordController";
                }
            }
        }
    }
    
    /**
     * Implementar validaciones en gesti√≥n de usuarios
     */
    private function implementUserManagementValidations() {
        echo "üë• Implementando validaciones en UserController...\n";
        
        $file = 'app/controllers/UserController.php';
        if (file_exists($file)) {
            $content = file_get_contents($file);
            
            // Buscar m√©todo de creaci√≥n/edici√≥n de usuario
            if (strpos($content, 'public function createUser') !== false) {
                // Agregar validaciones al inicio del m√©todo
                $validationCode = '
        // Validaciones cr√≠ticas
        $name = Validator::sanitizePost("name");
        $email = Validator::sanitizePost("email");
        $role = Validator::sanitizePost("role");
        
        if (empty($name) || empty($email) || empty($role)) {
            $_SESSION["error"] = "Todos los campos son requeridos";
            header("Location: " . url . "users/create");
            exit();
        }
        
        // Validar email
        $emailValidation = Validator::validateEmail($email);
        if (!$emailValidation["valid"]) {
            $_SESSION["error"] = $emailValidation["error"];
            header("Location: " . url . "users/create");
            exit();
        }
        
        // Validar nombre
        $nameValidation = Validator::validateString($name, 100, 2);
        if (!$nameValidation["valid"]) {
            $_SESSION["error"] = $nameValidation["error"];
            header("Location: " . url . "users/create");
            exit();
        }
        
        // Validar rol
        $roleValidation = Validator::validateString($role, 50, 1);
        if (!$roleValidation["valid"]) {
            $_SESSION["error"] = $roleValidation["error"];
            header("Location: " . url . "users/create");
            exit();
        }
        
        // Usar valores validados
        $name = $nameValidation["value"];
        $email = $emailValidation["value"];
        $role = $roleValidation["value"];
';
                
                $content = str_replace(
                    'public function createUser() {',
                    'public function createUser() {' . $validationCode,
                    $content
                );
                
                if (file_put_contents($file, $content)) {
                    echo "   ‚úÖ Validaciones implementadas en UserController\n";
                    $this->implemented++;
                } else {
                    $this->errors[] = "Error implementando validaciones en UserController";
                }
            }
        }
    }
    
    /**
     * Implementar validaciones en gesti√≥n de escuelas
     */
    private function implementSchoolValidations() {
        echo "üè´ Implementando validaciones en SchoolController...\n";
        
        $file = 'app/controllers/SchoolController.php';
        if (file_exists($file)) {
            $content = file_get_contents($file);
            
            // Buscar m√©todo de creaci√≥n de escuela
            if (strpos($content, 'public function createSchool') !== false) {
                // Agregar validaciones al inicio del m√©todo
                $validationCode = '
        // Validaciones cr√≠ticas
        $name = Validator::sanitizePost("name");
        $address = Validator::sanitizePost("address");
        $phone = Validator::sanitizePost("phone");
        
        if (empty($name) || empty($address) || empty($phone)) {
            $_SESSION["error"] = "Todos los campos son requeridos";
            header("Location: " . url . "schools/create");
            exit();
        }
        
        // Validar nombre
        $nameValidation = Validator::validateString($name, 200, 3);
        if (!$nameValidation["valid"]) {
            $_SESSION["error"] = $nameValidation["error"];
            header("Location: " . url . "schools/create");
            exit();
        }
        
        // Validar direcci√≥n
        $addressValidation = Validator::validateString($address, 500, 10);
        if (!$addressValidation["valid"]) {
            $_SESSION["error"] = $addressValidation["error"];
            header("Location: " . url . "schools/create");
            exit();
        }
        
        // Validar tel√©fono
        $phoneValidation = Validator::validatePhone($phone);
        if (!$phoneValidation["valid"]) {
            $_SESSION["error"] = $phoneValidation["error"];
            header("Location: " . url . "schools/create");
            exit();
        }
        
        // Usar valores validados
        $name = $nameValidation["value"];
        $address = $addressValidation["value"];
        $phone = $phoneValidation["value"];
';
                
                $content = str_replace(
                    'public function createSchool() {',
                    'public function createSchool() {' . $validationCode,
                    $content
                );
                
                if (file_put_contents($file, $content)) {
                    echo "   ‚úÖ Validaciones implementadas en SchoolController\n";
                    $this->implemented++;
                } else {
                    $this->errors[] = "Error implementando validaciones en SchoolController";
                }
            }
        }
    }
    
    /**
     * Implementar validaciones en calificaciones
     */
    private function implementGradeValidations() {
        echo "üìä Implementando validaciones en GradeController...\n";
        
        $file = 'app/controllers/GradeController.php';
        if (file_exists($file)) {
            $content = file_get_contents($file);
            
            // Buscar m√©todo de agregar calificaci√≥n
            if (strpos($content, 'public function addGrade') !== false) {
                // Agregar validaciones al inicio del m√©todo
                $validationCode = '
        // Validaciones cr√≠ticas
        $studentId = Validator::sanitizePost("student_id");
        $subjectId = Validator::sanitizePost("subject_id");
        $grade = Validator::sanitizePost("grade");
        $period = Validator::sanitizePost("period");
        
        if (empty($studentId) || empty($subjectId) || empty($grade) || empty($period)) {
            $_SESSION["error"] = "Todos los campos son requeridos";
            header("Location: " . url . "grades/add");
            exit();
        }
        
        // Validar IDs
        $studentIdValidation = Validator::validateInt($studentId, 1);
        if (!$studentIdValidation["valid"]) {
            $_SESSION["error"] = "ID de estudiante inv√°lido";
            header("Location: " . url . "grades/add");
            exit();
        }
        
        $subjectIdValidation = Validator::validateInt($subjectId, 1);
        if (!$subjectIdValidation["valid"]) {
            $_SESSION["error"] = "ID de materia inv√°lido";
            header("Location: " . url . "grades/add");
            exit();
        }
        
        // Validar calificaci√≥n
        $gradeValidation = Validator::validateFloat($grade, 0.0, 5.0);
        if (!$gradeValidation["valid"]) {
            $_SESSION["error"] = "La calificaci√≥n debe estar entre 0.0 y 5.0";
            header("Location: " . url . "grades/add");
            exit();
        }
        
        // Validar per√≠odo
        $periodValidation = Validator::validateString($period, 20, 1);
        if (!$periodValidation["valid"]) {
            $_SESSION["error"] = $periodValidation["error"];
            header("Location: " . url . "grades/add");
            exit();
        }
        
        // Usar valores validados
        $studentId = $studentIdValidation["value"];
        $subjectId = $subjectIdValidation["value"];
        $grade = $gradeValidation["value"];
        $period = $periodValidation["value"];
';
                
                $content = str_replace(
                    'public function addGrade() {',
                    'public function addGrade() {' . $validationCode,
                    $content
                );
                
                if (file_put_contents($file, $content)) {
                    echo "   ‚úÖ Validaciones implementadas en GradeController\n";
                    $this->implemented++;
                } else {
                    $this->errors[] = "Error implementando validaciones en GradeController";
                }
            }
        }
    }
    
    /**
     * Generar reporte de implementaci√≥n
     */
    private function generateImplementationReport() {
        echo "\n" . str_repeat("=", 60) . "\n";
        echo "üõ°Ô∏è REPORTE DE IMPLEMENTACI√ìN DE VALIDACIONES CR√çTICAS\n";
        echo str_repeat("=", 60) . "\n";
        
        echo "\n‚úÖ VALIDACIONES IMPLEMENTADAS\n";
        echo str_repeat("-", 40) . "\n";
        echo "üîê Login: Validaci√≥n de email y contrase√±a\n";
        echo "üìù Registro: Validaci√≥n completa de datos\n";
        echo "üîë Cambio de contrase√±a: Validaci√≥n de nueva contrase√±a\n";
        echo "üë• Gesti√≥n de usuarios: Validaci√≥n de datos de usuario\n";
        echo "üè´ Gesti√≥n de escuelas: Validaci√≥n de datos de escuela\n";
        echo "üìä Calificaciones: Validaci√≥n de notas y per√≠odos\n";
        
        echo "\nüìä ESTAD√çSTICAS\n";
        echo str_repeat("-", 40) . "\n";
        echo "‚úÖ Controladores actualizados: $this->implemented\n";
        echo "‚ùå Errores encontrados: " . count($this->errors) . "\n";
        
        if (!empty($this->errors)) {
            echo "\n‚ùå ERRORES\n";
            echo str_repeat("-", 40) . "\n";
            foreach ($this->errors as $error) {
                echo "- $error\n";
            }
        }
        
        echo "\nüõ°Ô∏è SEGURIDAD MEJORADA\n";
        echo str_repeat("-", 40) . "\n";
        echo "‚úÖ Validaci√≥n de tipos de datos\n";
        echo "‚úÖ Sanitizaci√≥n de entrada\n";
        echo "‚úÖ Validaci√≥n de rangos y longitudes\n";
        echo "‚úÖ Manejo seguro de errores\n";
        echo "‚úÖ Prevenci√≥n de inyecci√≥n SQL/XSS\n";
        
        echo "\nüí° PR√ìXIMOS PASOS\n";
        echo str_repeat("-", 40) . "\n";
        echo "1. üß™ Probar las validaciones implementadas\n";
        echo "2. üìù Documentar las nuevas validaciones\n";
        echo "3. üîÑ Implementar validaciones en otros controladores\n";
        echo "4. üõ°Ô∏è Agregar validaciones CSRF\n";
        echo "5. üìä Monitorear logs de validaci√≥n\n";
        
        echo "\n" . str_repeat("=", 60) . "\n";
        echo "üéâ ¬°Validaciones cr√≠ticas implementadas exitosamente!\n";
        echo str_repeat("=", 60) . "\n";
    }
}

// Ejecutar implementaci√≥n
$implementer = new CriticalValidationImplementer();

echo "\nüéâ ¬°Implementaci√≥n completada!\n";
?> 